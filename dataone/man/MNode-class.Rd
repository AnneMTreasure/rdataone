% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/D1Client.R, R/D1Node.R, R/MNode.R
\docType{methods}
\name{uploadDataObject,D1Client,DataObject-method}
\alias{MNode,D1Node-method}
\alias{MNode,character-method}
\alias{MNode-class}
\alias{describe,MNode,character-method}
\alias{generateIdentifier,MNode-method}
\alias{getSystemMetadata,MNode,character-method}
\alias{listObjects,D1Node-method}
\alias{uploadDataObject,D1Client,DataObject-method}
\title{Retrieve the list of objects present on the MN that match the calling parameters.}
\usage{
\S4method{uploadDataObject}{D1Client,DataObject}(x, do,
  replicate = as.logical(FALSE), numberReplicas = NA, preferredNodes = NA,
  public = as.logical(FALSE), accessRules = NA, ...)

\S4method{listObjects}{D1Node}(node, fromDate = as.character(NA),
  toDate = as.character(NA), formatId = as.character(NA),
  replicaStatus = as.logical(TRUE), start = as.integer(0),
  count = as.integer(1000))

\S4method{MNode}{character}(x)

\S4method{MNode}{D1Node}(x)

\S4method{getSystemMetadata}{MNode,character}(node, pid)

\S4method{describe}{MNode,character}(node, pid)

\S4method{generateIdentifier}{MNode}(mnode, scheme = "UUID",
  fragment = NULL)
}
\arguments{
\item{node}{The MNode or CNode instance from which the checksum will be retrieved}

\item{fromDate}{Entries with a modified date greater than \code{'fromDate'} will be returned.
This value must be specified in ISO 8601 format, i.e. "YYYY-MM-DDTHH:MM:SS.mmm+00:00"}

\item{toDate}{Entries with a modified date less than \code{'toDate'} will be returned.
This value must be specified in ISO 8601 format, i.e. "YYYY-MM-DDTHH:MM:SS.mmm+00:00"}

\item{formatId}{The format to match, for example "eml://ecoinformatics.org/eml-2.1.1"}

\item{replicaStatus}{A logical value that determines if replica (object not on it's origin node) should be returned. Default is TRUE.}

\item{start}{An integer that specifies the first element of the result set that will be returned}

\item{count}{An integer that specifies how many results will be returned}

\item{pid}{The identifier of the object}

\item{mnode}{The MNode instance from which the identifier will be generated}

\item{node}{The MNode instance from which the SystemMetadata will be downloaded}

\item{pid}{Identifier for the object in question. May be either a PID or a SID. Transmitted as
part of the URL path and must be escaped accordingly.}
}
\value{
list Objects that met the search criteria

SystemMetadata for the object

A list of header elements
}
\description{
Retrieve the list of objects present on the MN that match the calling parameters.

MNode provides functions interacting with the a DataONE Member Node repository, which
is a repository that provides access for reading and writing data and metadata using the common
DataONE service API.  The MNode API includes functions for retrieving data and metadata based on its
unique persistent identifier (pid), as well as for creating, updating, and archiving these data and
metadata objects.

The SystemMetadata includes information about the identity, type, access control, and other system
level details about the object.

This method provides a lighter weight mechanism than getSystemMetadata() for a client to
determine basic properties of the referenced object.
}
\details{
The list of objects that is returned is paged according to the \code{'start'} and
\code{'count'} values, so that large result sets can be returned over multiple calls.

Methods that perform write operations on the Member Node generally require
authentication, which is managed via a client-side X.509 certificate via
CILogon \url{https://cilogon.org/?skin=DataONE}.  See \code{\link{{CertificateManager}}} for details.

This operation acts as the 'public' anonymous user unless an X.509 certificate is
present in the default location of the file system, in which case the access will be authenticated.
}
\section{Methods (by generic)}{
\itemize{
\item \code{uploadDataObject}: 

\item \code{listObjects}: 

\item \code{MNode}: 

\item \code{MNode}: 

\item \code{getSystemMetadata}: 

\item \code{describe}: 

\item \code{generateIdentifier}: 
}}
\section{Slots}{

\describe{
\item{\code{endpoint}}{The url to access node services, which is the baseURL plus the version string}
}}
\section{Methods}{

\itemize{
 \item{\code{\link{MNode}}}{: Create a MNode object representing a DataONE Member Node repository.}
 \item{\code{\link{create}}}{: Create an object on a Member Node.}
 \item{\code{\link{getCapabilities}}}{: Get the node capabilities description, and store the information in the MNode.}
 \item{\code{\link{generateIdentifier}}}{: Get a unique identifier that is generated by the Member Node repository and guaranteed to be unique.}
 \item{\code{\link{getPackage}}}{: Download a data package from a member node.}
 \item{\code{\link{update}}}{: Update an object on a Member Node, by creating a new object that replaces an original.}
 \item{\code{\link{updateSystemMetadata}}}{: Update the system metadata associated with an object.}
}
}
\examples{
\dontrun{
cn <- CNode("STAGING2")
mn <- getMNode(cn, "urn:node:mnTestKNB")
mnid <- mn@identifier
newid <- generateIdentifier(mn, "UUID")
cm <- CertificateManager()
u <- showClientSubject(cm)
testdf <- data.frame(x=1:10,y=11:20)
csvfile <- paste(tempfile(), ".csv", sep="")
write.csv(testdf, csvfile, row.names=FALSE)
f <- "text/csv"
size <- file.info(csvfile)$size
sha1 <- digest(csvfile, algo="sha1", serialize=FALSE, file=TRUE)
sysmeta <- new("SystemMetadata", identifier=newid, formatId=f, size=size, submitter=u, rightsHolder=u, checksum=sha1, originMemberNode=mnid, authoritativeMemberNode=mnid)
response <- create(mn, newid, csvfile, sysmeta)
}
\dontrun{
mn_uri <- "https://knb.ecoinformatics.org/knb/d1/mn/v1"
mn <- MNode(mn_uri)
pid <- "knb.473.1"
describe(mn, pid)
describe(mn, "adfadf") # warning message when wrong pid
}
}
\seealso{
\url{http://mule1.dataone.org/ArchitectureDocs-current/apis/MN_APIs.html#MN_read.listObjects}

\code{\link{dataone}}{ package description.}

\url{http://mule1.dataone.org/ArchitectureDocs-current/apis/MN_APIs.html#MNRead.getSystemMetadata}

\url{http://mule1.dataone.org/ArchitectureDocs-current/apis/MN_APIs.html#MNRead.describe}
}

