% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/D1Node.R
\name{query}
\alias{query}
\title{Search DataONE for data and metadata objects}
\usage{
query(d1node, ...)
}
\arguments{
\item{d1node}{The coordinating node or member node object instance to query}

\item{solrQuery}{The query parameters to be searched, either as a string or as list with named attributes.}

\item{as}{The return type. Possible values: "text", "parsed", "list" where "parsed" is the default.}

\item{encode}{A boolean, if true then URLencode the entire query string if a character, or each parameter value if a list}
}
\value{
search results
}
\description{
Use SOLR syntax to search the DataONE federation of data repositories for matching data.
}
\details{
Several different return types can be specified with the \code{"as"} parameter: "text", "parsed", "list".
If "text" is specified, then the query results are returned as a character varialble. Specify "parsed" to
have the result converted to an XML document (R XMLInternalDocument). Specify 'list' to have
the result converted to an R list, with each element containing one result as a list of values, for example.
\code{'result[[1]]$id'} would be the DataONE identifier value of the first result.
Any lucene reserved characters in query parameters must be escaped with backslash, for example,
\code{'queryParams <- "q=id:doi\\:10.6073/AA/knb-lter-and.4341.13"'}. Notice that the colon after
\code{'q=id'} is not escaped, as this is needed by Solr to parse the query.
If solrQuery is a list,
it is expected to have field names as attributes and search values as the values in the list.
}
\examples{
\dontrun{
queryParams <- "q=id:doi*&rows=2&wt=xml"
cn <- CNode("SANDBOX")
result <- query(cn, queryParams, as="list")
}
}

