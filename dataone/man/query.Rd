% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/D1Node.R
\name{query}
\alias{query}
\title{Search DataONE for data and metadata objects}
\usage{
query(d1node, ...)
}
\arguments{
\item{d1node}{The coordinating node or member node object instance to query.}

\item{solrQuery}{The query parameters to be searched, either as a string or as list with named attributes.}

\item{encode}{A boolean, if true then the entire query string is URLencoded if it is a character, or each parameter value if a list.}

\item{as}{The return type. Possible values: "json", "xml", "list" or "data.frame" with "list" as the default.}

\item{parse}{A boolean value. If TRUE, then the result is parsed and converted to R data types. If FALSE, text values are returned.}
}
\value{
search results
}
\description{
Use SOLR syntax to search the DataONE federation of data repositories for matching data.
}
\details{
Several different return types can be specified with the \code{"as"} parameter: "json", xml", "list", "data.frame".
If "xml" is specified and \code{'parsed=TRUE'} then the query result is returned as an R XMLInternalDocument. If \code{'parsed'} is
false then a character variable with the XML string is returned. Specify 'list' to have
the result parseed to an R list, with each list element containing one Solr result as a list of values, for example.
\code{'result[[1]]$id'} would be the DataONE identifier value of the first result (if the query parameters specified that
the id field shoudl be returned from the query). If \code{'json'} is specified, then the Solr response writer argument
\code{'&wt=json'} must be included in the \code{'solQuery'} parameter. Currently for a json return type the \code{'parse'} parameter
is ignored and unparsed text will always be returned.
Any lucene reserved characters in query parameters must be escaped with backslash, for example,
\code{'queryParams <- "q=id:doi\\:10.6073/AA/knb-lter-and.4341.13"'}. Notice that the colon after
\code{'q=id'} is not escaped, as this is needed by Solr to parse the query.
If solrQuery is a list,
it is expected to have field names as attributes and search values as the values in the list.
}
\examples{
\dontrun{
cn <- CNode("PROD")
queryParams <- list(q="id:doi*", rows="5", fq="(abstract:chlorophyll AND dateUploaded:[2000-01-01T00:00:00Z TO NOW])", fl="title,id,abstract,size,dateUploaded,attributeName")
result <- query(cn, queryParams, as="list")

queryParams <- list(q="id:doi*", rows="3", fq="(abstract:chlorophyll AND dateUploaded:[2000-01-01T00:00:00Z TO NOW])", fl="title,id,abstract,size,dateUploaded,attributeName")
result <- query(cn, queryParams, as="data.frame", parse=FALSE)

queryParams <- "q=id:doi*&rows=2&wt=json"
result <- query(cn, queryParams, as="json")
}
}

