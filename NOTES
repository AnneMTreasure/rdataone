== Current Status ==============================================================
12/21/2012 - kram
  * Wondering why the license is part of every script when the same is in the LICENSE file? Not a big deal but curious.
  * Outside of class definitions, I don't see any of the functions documented in the manual under the R folder. Are these all handled by the jars in java/?


10/26/2012 - rnahf
  * status:  testing.R tests 1,2,4 are working.  3 and 5 (creating and getting DataPackage) are not.
  * did some basic code cleanup for better readability
  * testing.R - wired the mn_nodeid used for testD1Object into the testDataPackage


10/25/2012 - rnahf
inst/java:
  * updated the d1_common_java and d1_libclient_java jars to incorporate new trustManager logic
  * updated httpclient, httpcore, httpmime to 4.1.3

testing.R
  * added default MN_node_id.  Getting tests to get most of the way through Test 3.


install.sh:
  * Installs compiled version of the library into ~/.Rlibrary so root
      access is not needed.  This can be over-ridden with the R_LIBS_USER
      environment variable.

inst/java:
  * Added four JARs so that the DataPackage#deserializePackage() code would work:
    r9842 | pippin | 2012-08-07 13:14:23 -0700 (Tue, 07 Aug 2012) | 2 lines
    Changed paths:
      A /software/cicore/trunk/itk/d1_client_r/inst/java/icu4j-3.4.4.jar
      A /software/cicore/trunk/itk/d1_client_r/inst/java/iri-0.5.jar
      A /software/cicore/trunk/itk/d1_client_r/inst/java/jena-2.5.5.jar
      A /software/cicore/trunk/itk/d1_client_r/inst/java/xercesImpl-2.6.2.jar
  * This still uses three pre-release JARs for Apache http client.
      httpclient-4.1-alpha2.jar
      httpcore-4.1-beta1.jar
      httpmime-4.0-beta2.jar
    These should be updated.

testing.R:
  * There are currently ten tests, five of which validate the rJava
      installation.  These can be skipped over by setting the R environment
      with SKIP_JAVAENV_TEST="skip" in ${HOME}/.Renviron
  * The other tests are as follows:
    #1: Creates a basic D1Object ("text/csv") and pushes it into DataONE.
    #2: Converts an R data frame into a CSV value for use in a D1Object
    #3: Creates a DataPackage and pushes it into DataONE.
    #4: Retrieves an object out of DataONE.
    #5: Retrieves a data package (format-id of "http://www.openarchives.org/ore/terms")
        from DataONE.  Uses the java DataObject to do all the heavy lifting.
  * Tests #1, #2, #4, and #5 have been shown to pass.  Work was currently being
      done so test #3 (creating a data package) would pass.  Until the Java
      side is completed, all processing will need to be duplicated in R.

D1Client-class.R:
  * Added additional constructors for 0, 1, and 2 parameters.

D1Client-methods.R:
  * Added method reserveIdentifier().  Any interaction with DataONE should be
      implemented through this module, since it abstracts the differences
      between the functionality of the Coordinating Node and the Member Node.
  * The create() method was causing me serious headaches due to the problems
      with SSL.  As a result, there is a lot of debug code added to the method
      that should probably be removed.

D1Object-*.R:
  * A thin wrapper around the org.dataone.client.D1Oject Java object.

DataPackage-*.R
  * This is a relatively thick wrapper around the Java DataPackage.
  * This is where I left off, trying to marshal R objects into Java objects
      for storage in DataONE.


== Notes =======================================================================

  * When installing rJava, be careful of your current environment.  R
    resolves symbolic links for JAVA_HOME, but follows the links for the
    other configuration values.  For example:

  $ ls -l /usr/local/java
  lrwxrwxrwx 1 root root 31 Aug 10 09:44 /usr/local/java -> /opt/oracle/sun/jdk-6u33
  $ sudo su -
  # R
      [... legal verbage ...]
  > install.packages('rJava')
  > q()
  # exit
  $ R CMD javareconf
  Java interpreter : /usr/local/java/jre/bin/java
  Java version     : 1.6.0_33
  Java home path   : /opt/oracle/sun/jdk-6u33
  Java compiler    : /usr/local/java/bin/javac
  Java headers gen.: /usr/local/java/bin/javah
  Java archive tool: /usr/local/java/bin/jar
  [...]

This causes problems in the future because if you ever update your version
of Java, it will still use the old configuration.


